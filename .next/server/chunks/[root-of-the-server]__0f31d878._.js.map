{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":["file:///home/humayou/Desktop/Decentralized-Voting-System/src/pages/api/registration/register.js"],"sourcesContent":["// pages/api/registration/register.js\nimport mongoose from 'mongoose';\n\n// Registration model - adjust the path based on your project structure\n// Common paths: '../../../models/Registration' or '../../models/Registration'\nlet Registration;\n\nasync function getRegistrationModel() {\n  if (Registration) {\n    return Registration;\n  }\n  \n  try {\n    // Try different import paths\n    const paths = [\n      '../../../models/Registration',\n      '../../models/Registration', \n      '../../../models/Registration.js',\n      '../../models/Registration.js'\n    ];\n    \n    for (const importPath of paths) {\n      try {\n        const module = await import(importPath);\n        Registration = module.default;\n        console.log(`✅ Registration model loaded from: ${importPath}`);\n        return Registration;\n      } catch (err) {\n        console.log(`❌ Failed to load from: ${importPath}`);\n        continue;\n      }\n    }\n    \n    throw new Error('Could not load Registration model from any path');\n  } catch (error) {\n    console.error('Error loading Registration model:', error);\n    throw error;\n  }\n}\n\n// MongoDB connection\nconst connectDB = async () => {\n  try {\n    // Check if already connected\n    if (mongoose.connections[0].readyState === 1) {\n      console.log('Using existing MongoDB connection');\n      return mongoose.connections[0];\n    }\n\n    // Check if connecting\n    if (mongoose.connections[0].readyState === 2) {\n      console.log('MongoDB connection is connecting...');\n      // Wait for connection to complete\n      await new Promise((resolve) => {\n        mongoose.connections[0].on('connected', resolve);\n      });\n      return mongoose.connections[0];\n    }\n\n    console.log('Creating new MongoDB connection...');\n    console.log('MongoDB URI exists:', !!process.env.MONGODB_URI);\n    \n    if (!process.env.MONGODB_URI) {\n      throw new Error('MONGODB_URI environment variable is not set');\n    }\n    \n    const connection = await mongoose.connect(process.env.MONGODB_URI, {\n      bufferCommands: false,\n      maxPoolSize: 10,\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    });\n    \n    console.log('✅ MongoDB connected successfully');\n    return connection;\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    console.error('Error details:', {\n      name: error.name,\n      message: error.message,\n      code: error.code\n    });\n    throw error;\n  }\n};\n\n// Rate limiting (simple in-memory store - use Redis in production)\nconst rateLimit = new Map();\nconst RATE_LIMIT_WINDOW = 15 * 60 * 1000; // 15 minutes\nconst MAX_ATTEMPTS = 5;\n\nconst checkRateLimit = (ip) => {\n  const now = Date.now();\n  const userAttempts = rateLimit.get(ip) || [];\n  \n  // Clean old attempts\n  const recentAttempts = userAttempts.filter(time => now - time < RATE_LIMIT_WINDOW);\n  \n  if (recentAttempts.length >= MAX_ATTEMPTS) {\n    return false;\n  }\n  \n  recentAttempts.push(now);\n  rateLimit.set(ip, recentAttempts);\n  return true;\n};\n\n// Validation helper\nconst validateRegistrationData = (data) => {\n  const errors = {};\n  \n  // CNIC validation\n  if (!data.cnicNumber || !/^\\d{13}$/.test(data.cnicNumber)) {\n    errors.cnicNumber = 'CNIC must be exactly 13 digits';\n  }\n  \n  // Name validation\n  if (!data.firstName || !data.firstName.trim()) {\n    errors.firstName = 'First name is required';\n  }\n  \n  if (!data.lastName || !data.lastName.trim()) {\n    errors.lastName = 'Last name is required';\n  }\n  \n  // Date of birth validation\n  if (!data.dateOfBirth) {\n    errors.dateOfBirth = 'Date of birth is required';\n  } else {\n    const birthDate = new Date(data.dateOfBirth);\n    const age = Math.floor((Date.now() - birthDate) / (365.25 * 24 * 60 * 60 * 1000));\n    if (age < 18 || age > 100) {\n      errors.dateOfBirth = 'Age must be between 18 and 100 years';\n    }\n  }\n  \n  // Province validation\n  const validProvinces = ['Punjab', 'Sindh', 'Khyber Pakhtunkhwa', 'Balochistan', 'Gilgit'];\n  if (!data.province || !validProvinces.includes(data.province)) {\n    errors.province = 'Valid province is required';\n  }\n  \n  // Constituency validation\n  if (!data.constituency || !data.constituency.trim()) {\n    errors.constituency = 'Constituency is required';\n  }\n  \n  // Biometric data validation\n  if (!data.biometricData) {\n    errors.biometricData = 'Biometric data is required';\n  } else {\n    const { id, rawId, type, challenge, userId, timestamp } = data.biometricData;\n    \n    if (!id || !rawId || !type || !challenge || !userId || !timestamp) {\n      errors.biometricData = 'Complete biometric data is required';\n    }\n    \n    // Check if biometric data is too old (max 10 minutes)\n    const biometricAge = Date.now() - new Date(timestamp).getTime();\n    if (biometricAge > 10 * 60 * 1000) {\n      errors.biometricData = 'Biometric data is too old, please re-register fingerprint';\n    }\n  }\n  \n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\nexport default async function handler(req, res) {\n  // Set CORS headers\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');\n\n  // Handle preflight OPTIONS request\n  if (req.method === 'OPTIONS') {\n    res.status(200).end();\n    return;\n  }\n\n  // Only allow POST requests\n  if (req.method !== 'POST') {\n    res.status(405).json({\n      success: false,\n      message: 'Method not allowed'\n    });\n    return;\n  }\n\n  try {\n    console.log('=== REGISTRATION API CALLED ===');\n    \n    // Connect to database\n    await connectDB();\n    console.log('Database connected successfully');\n    \n    // Get Registration model\n    const RegistrationModel = await getRegistrationModel();\n    \n    // Get client IP\n    const clientIP = req.headers['x-forwarded-for']?.split(',')[0] || \n                    req.headers['x-real-ip'] || \n                    req.socket.remoteAddress || \n                    'unknown';\n\n    console.log('Client IP:', clientIP);\n\n    // Check rate limiting\n    if (!checkRateLimit(clientIP)) {\n      console.log('Rate limit exceeded for IP:', clientIP);\n      res.status(429).json({\n        success: false,\n        message: 'Rate limit exceeded. Please wait 15 minutes before trying again.'\n      });\n      return;\n    }\n\n    const registrationData = req.body;\n    \n    // Log the received data for debugging (without sensitive info)\n    console.log('Received registration data:', {\n      cnicNumber: registrationData?.cnicNumber?.substring(0, 5) + '********',\n      firstName: registrationData?.firstName,\n      lastName: registrationData?.lastName,\n      province: registrationData?.province,\n      constituency: registrationData?.constituency,\n      hasBiometricData: !!registrationData?.biometricData,\n      biometricDataKeys: registrationData?.biometricData ? Object.keys(registrationData.biometricData) : []\n    });\n    \n    // Basic data check\n    if (!registrationData) {\n      console.log('No registration data received');\n      res.status(400).json({\n        success: false,\n        message: 'No registration data provided'\n      });\n      return;\n    }\n    \n    // Validate input data\n    const validation = validateRegistrationData(registrationData);\n    if (!validation.isValid) {\n      console.log('Validation errors:', validation.errors);\n      res.status(400).json({\n        success: false,\n        message: 'Validation failed',\n        errors: validation.errors\n      });\n      return;\n    }\n\n    console.log('Validation passed');\n\n    // Check if CNIC already exists\n    const existingRegistration = await RegistrationModel.findByCNIC(registrationData.cnicNumber);\n    if (existingRegistration) {\n      console.log('CNIC already exists:', registrationData.cnicNumber);\n      res.status(409).json({\n        success: false,\n        message: 'CNIC already registered'\n      });\n      return;\n    }\n\n    console.log('CNIC is unique, proceeding with registration');\n\n    // Prepare registration data\n    const newRegistration = new RegistrationModel({\n      cnicNumber: registrationData.cnicNumber,\n      firstName: registrationData.firstName.trim(),\n      lastName: registrationData.lastName.trim(),\n      dateOfBirth: new Date(registrationData.dateOfBirth),\n      province: registrationData.province,\n      constituency: registrationData.constituency.trim(),\n      biometricData: {\n        ...registrationData.biometricData,\n        timestamp: new Date(registrationData.biometricData.timestamp),\n        deviceInfo: {\n          userAgent: req.headers['user-agent'] || '',\n          platform: req.headers['sec-ch-ua-platform'] || '',\n          language: req.headers['accept-language'] || ''\n        }\n      },\n      ipAddress: clientIP,\n      userAgent: req.headers['user-agent'] || '',\n      status: 'pending',\n      submissionTime: new Date(),\n      lastUpdated: new Date()\n    });\n\n    console.log('Attempting to save registration to database...');\n    \n    // Save to database\n    const savedRegistration = await newRegistration.save();\n    \n    console.log('Registration saved successfully with ID:', savedRegistration.registrationId);\n\n    // Return success response (without sensitive data)\n    const responseData = {\n      registrationId: savedRegistration.registrationId,\n      fullName: `${savedRegistration.firstName} ${savedRegistration.lastName}`,\n      status: savedRegistration.status,\n      province: savedRegistration.province,\n      constituency: savedRegistration.constituency,\n      submissionTime: savedRegistration.submissionTime,\n    };\n\n    console.log('Sending success response');\n    res.status(201).json({\n      success: true,\n      message: 'Registration submitted successfully',\n      data: responseData\n    });\n\n  } catch (error) {\n    console.error('=== REGISTRATION ERROR ===');\n    console.error('Error details:', error);\n    console.error('Error stack:', error.stack);\n    \n    // Handle specific MongoDB errors\n    if (error.code === 11000) {\n      console.log('Duplicate key error (11000)');\n      res.status(409).json({\n        success: false,\n        message: 'CNIC already registered'\n      });\n      return;\n    }\n    \n    if (error.name === 'ValidationError') {\n      console.log('Mongoose validation error');\n      console.log('Validation details:', error.errors);\n      res.status(400).json({\n        success: false,\n        message: 'Validation error',\n        errors: error.errors\n      });\n      return;\n    }\n\n    // Generic error response\n    res.status(500).json({\n      success: false,\n      message: 'Internal server error. Please try again later.',\n      error: process.env.NODE_ENV === 'development' ? error.message : undefined\n    });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}
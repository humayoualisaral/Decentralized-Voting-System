{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///home/humayou/Desktop/Decentralized-Voting-System/src/models/Registration.js"],"sourcesContent":["// models/Registration.js\nimport mongoose from 'mongoose';\n\nconst BiometricDataSchema = new mongoose.Schema({\n  id: { type: String, required: true },\n  rawId: { type: String, required: true },\n  type: { type: String, required: true, default: 'public-key' },\n  challenge: { type: String, required: true },\n  userId: { type: String, required: true },\n  timestamp: { type: Date, required: true },\n  deviceInfo: {\n    userAgent: String,\n    platform: String,\n    language: String\n  }\n}, { _id: false });\n\nconst BiometricVerificationSchema = new mongoose.Schema({\n  timestamp: { type: Date, required: true },\n  biometricId: { type: String, required: true },\n  electionId: { type: String, required: true },\n  verificationHash: { type: String, required: true },\n  ipAddress: String,\n  userAgent: String\n}, { _id: false });\n\nconst VotingHistorySchema = new mongoose.Schema({\n  electionId: { type: String, required: true },\n  candidateId: { type: String, required: true },\n  timestamp: { type: Date, required: true },\n  verificationHash: { type: String, required: true },\n  biometricId: { type: String, required: true },\n  blockchainTxHash: String,\n  ipAddress: String\n}, { _id: false });\n\nconst RegistrationSchema = new mongoose.Schema({\n  // Personal Information\n  cnicNumber: {\n    type: String,\n    required: true,\n    unique: true,\n    match: /^\\d{13}$/,\n    index: true\n  },\n  firstName: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 50\n  },\n  lastName: {\n    type: String,\n    required: true,\n    trim: true,\n    maxlength: 50\n  },\n  dateOfBirth: {\n    type: Date,\n    required: true,\n    validate: {\n      validator: function(value) {\n        const age = Math.floor((Date.now() - value) / (365.25 * 24 * 60 * 60 * 1000));\n        return age >= 18 && age <= 100;\n      },\n      message: 'Age must be between 18 and 100 years'\n    }\n  },\n  \n  // Location Information\n  province: {\n    type: String,\n    required: true,\n    enum: ['Punjab', 'Sindh', 'Khyber Pakhtunkhwa', 'Balochistan', 'Gilgit']\n  },\n  constituency: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  \n  // Biometric Data\n  biometricData: {\n    type: BiometricDataSchema,\n    required: true\n  },\n  \n  // Biometric Verification Tracking\n  lastBiometricVerification: {\n    type: BiometricVerificationSchema,\n    default: null\n  },\n  \n  biometricVerifications: [BiometricVerificationSchema],\n  \n  // Voting History (for audit purposes)\n  votingHistory: [VotingHistorySchema],\n  \n  // System Information\n  registrationId: {\n    type: String,\n    unique: true,\n    default: function() {\n      return 'NADRA-' + Date.now().toString(36).toUpperCase() + '-' + Math.random().toString(36).substr(2, 6).toUpperCase();\n    }\n  },\n  status: {\n    type: String,\n    enum: ['pending', 'verified', 'rejected', 'active', 'suspended'],\n    default: 'pending'\n  },\n  submissionTime: {\n    type: Date,\n    default: Date.now\n  },\n  lastUpdated: {\n    type: Date,\n    default: Date.now\n  },\n  ipAddress: String,\n  userAgent: String,\n  \n  // Verification Status\n  isVerified: {\n    type: Boolean,\n    default: false\n  },\n  verificationDate: Date,\n  verificationNotes: String,\n  \n  // Voting Status\n  isEligibleToVote: {\n    type: Boolean,\n    default: true\n  },\n  votingRestrictions: [{\n    reason: String,\n    imposedDate: Date,\n    expiryDate: Date,\n    isActive: { type: Boolean, default: true }\n  }],\n  \n  // Security Features\n  lastLoginAttempt: Date,\n  failedLoginAttempts: { type: Number, default: 0 },\n  accountLocked: { type: Boolean, default: false },\n  lockExpiry: Date\n  \n}, {\n  timestamps: true,\n  toJSON: { \n    transform: function(doc, ret) {\n      delete ret.__v;\n      delete ret.biometricData.rawId; // Don't expose raw biometric data\n      delete ret.biometricData.challenge;\n      return ret;\n    }\n  }\n});\n\n// Indexes for better performance\nRegistrationSchema.index({ cnicNumber: 1 });\nRegistrationSchema.index({ registrationId: 1 });\nRegistrationSchema.index({ submissionTime: -1 });\nRegistrationSchema.index({ province: 1, constituency: 1 });\nRegistrationSchema.index({ status: 1 });\nRegistrationSchema.index({ isVerified: 1 });\nRegistrationSchema.index({ 'lastBiometricVerification.timestamp': -1 });\n\n// Pre-save middleware\nRegistrationSchema.pre('save', function(next) {\n  this.lastUpdated = new Date();\n  next();\n});\n\n// Instance methods\nRegistrationSchema.methods.verifyRegistration = function(notes) {\n  this.isVerified = true;\n  this.status = 'verified';\n  this.verificationDate = new Date();\n  this.verificationNotes = notes || 'Registration verified successfully';\n  return this.save();\n};\n\nRegistrationSchema.methods.rejectRegistration = function(reason) {\n  this.status = 'rejected';\n  this.verificationNotes = reason || 'Registration rejected';\n  return this.save();\n};\n\nRegistrationSchema.methods.addBiometricVerification = function(verificationData) {\n  this.lastBiometricVerification = verificationData;\n  this.biometricVerifications.push(verificationData);\n  return this.save();\n};\n\nRegistrationSchema.methods.recordVote = function(voteData) {\n  const voteRecord = {\n    electionId: voteData.electionId,\n    candidateId: voteData.candidateId,\n    timestamp: new Date(),\n    verificationHash: voteData.verificationHash,\n    biometricId: voteData.biometricId,\n    blockchainTxHash: voteData.txHash,\n    ipAddress: voteData.ipAddress\n  };\n  \n  this.votingHistory.push(voteRecord);\n  return this.save();\n};\n\nRegistrationSchema.methods.hasVotedInElection = function(electionId) {\n  return this.votingHistory.some(vote => vote.electionId === electionId);\n};\n\nRegistrationSchema.methods.canVote = function() {\n  if (!this.isVerified || this.status !== 'verified') {\n    return { canVote: false, reason: 'Registration not verified' };\n  }\n  \n  if (!this.isEligibleToVote) {\n    return { canVote: false, reason: 'Voting eligibility suspended' };\n  }\n  \n  if (this.accountLocked && this.lockExpiry > new Date()) {\n    return { canVote: false, reason: 'Account temporarily locked' };\n  }\n  \n  const activeRestrictions = this.votingRestrictions.filter(\n    restriction => restriction.isActive && \n    (!restriction.expiryDate || restriction.expiryDate > new Date())\n  );\n  \n  if (activeRestrictions.length > 0) {\n    return { \n      canVote: false, \n      reason: `Voting restricted: ${activeRestrictions[0].reason}` \n    };\n  }\n  \n  return { canVote: true, reason: null };\n};\n\nRegistrationSchema.methods.lockAccount = function(durationMinutes = 30) {\n  this.accountLocked = true;\n  this.lockExpiry = new Date(Date.now() + durationMinutes * 60 * 1000);\n  return this.save();\n};\n\nRegistrationSchema.methods.unlockAccount = function() {\n  this.accountLocked = false;\n  this.lockExpiry = null;\n  this.failedLoginAttempts = 0;\n  return this.save();\n};\n\n// Static methods\nRegistrationSchema.statics.findByCNIC = function(cnic) {\n  return this.findOne({ cnicNumber: cnic });\n};\n\nRegistrationSchema.statics.findByRegistrationId = function(regId) {\n  return this.findOne({ registrationId: regId });\n};\n\nRegistrationSchema.statics.getRegistrationStats = function() {\n  return this.aggregate([\n    {\n      $group: {\n        _id: '$status',\n        count: { $sum: 1 }\n      }\n    }\n  ]);\n};\n\nRegistrationSchema.statics.getVotingStats = function(electionId) {\n  return this.aggregate([\n    { $match: { 'votingHistory.electionId': electionId } },\n    {\n      $group: {\n        _id: '$province',\n        totalVoters: { $sum: 1 },\n        votedCount: {\n          $sum: {\n            $size: {\n              $filter: {\n                input: '$votingHistory',\n                cond: { $eq: ['$$this.electionId', electionId] }\n              }\n            }\n          }\n        }\n      }\n    }\n  ]);\n};\n\nRegistrationSchema.statics.findEligibleVoters = function(constituency, province) {\n  return this.find({\n    isVerified: true,\n    status: 'verified',\n    isEligibleToVote: true,\n    constituency: constituency,\n    province: province,\n    $or: [\n      { accountLocked: false },\n      { lockExpiry: { $lt: new Date() } }\n    ]\n  });\n};\n\nexport default mongoose.models.Registration || mongoose.model('Registration', RegistrationSchema);"],"names":[],"mappings":"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","debugId":null}}]
}
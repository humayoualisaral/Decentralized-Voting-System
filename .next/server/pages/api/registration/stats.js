"use strict";(()=>{var a={};a.id=263,a.ids=[263],a.modules={4403:(a,b,c)=>{c.r(b),c.d(b,{config:()=>o,default:()=>n,handler:()=>q});var d={};c.r(d),c.d(d,{default:()=>k});var e=c(9046),f=c(8667),g=c(3480),h=c(6435),i=c(6489),j=c(7872);async function k(a,b){if("GET"!==a.method)return b.status(405).json({success:!1,error:"Method not allowed"});try{await (0,i.A)();let[a,c,d,e]=await Promise.all([j.A.getRegistrationStats(),j.A.aggregate([{$group:{_id:"$province",count:{$sum:1}}}]),j.A.countDocuments(),j.A.countDocuments({submissionTime:{$gte:new Date(Date.now()-6048e5)}})]);b.status(200).json({success:!0,data:{total:d,recentRegistrations:e,statusDistribution:a,provinceDistribution:c,generatedAt:new Date().toISOString()}})}catch(a){console.error("❌ Stats Error:",a),b.status(500).json({success:!1,error:"Internal server error",message:"Failed to retrieve statistics"})}}var l=c(8112),m=c(8766);let n=(0,h.M)(d,"default"),o=(0,h.M)(d,"config"),p=new g.PagesAPIRouteModule({definition:{kind:f.A.PAGES_API,page:"/api/registration/stats",pathname:"/api/registration/stats",bundlePath:"",filename:""},userland:d,distDir:".next",projectDir:""});async function q(a,b,c){let d=await p.prepare(a,b,{srcPage:"/api/registration/stats"});if(!d){b.statusCode=400,b.end("Bad Request"),null==c.waitUntil||c.waitUntil.call(c,Promise.resolve());return}let{query:f,params:g,prerenderManifest:h}=d;try{let c=a.method||"GET",d=(0,l.getTracer)(),e=d.getActiveScopeSpan(),i=p.instrumentationOnRequestError.bind(p),j=async e=>p.render(a,b,{query:{...f,...g},params:g,allowedRevalidateHeaderKeys:void 0,multiZoneDraftMode:!0,trustHostHeader:void 0,previewProps:h.preview,propagateError:!1,dev:p.isDev,page:"/api/registration/stats",projectDir:"",onError:(...b)=>i(a,...b)}).finally(()=>{if(!e)return;e.setAttributes({"http.status_code":b.statusCode,"next.rsc":!1});let f=d.getRootSpanAttributes();if(!f)return;if(f.get("next.span_type")!==m.BaseServerSpan.handleRequest)return void console.warn(`Unexpected root span type '${f.get("next.span_type")}'. Please report this Next.js issue https://github.com/vercel/next.js`);let g=f.get("next.route");if(g){let a=`${c} ${g}`;e.setAttributes({"next.route":g,"http.route":g,"next.span_name":a}),e.updateName(a)}else e.updateName(`${c} ${a.url}`)});e?await j(e):await d.withPropagatedContext(a.headers,()=>d.trace(m.BaseServerSpan.handleRequest,{spanName:`${c} ${a.url}`,kind:l.SpanKind.SERVER,attributes:{"http.method":c,"http.target":a.url}},j))}catch(a){if(p.isDev)throw a;(0,e.sendError)(b,500,"Internal Server Error")}finally{null==c.waitUntil||c.waitUntil.call(c,Promise.resolve())}}},5600:a=>{a.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6037:a=>{a.exports=require("mongoose")},6489:(a,b,c)=>{c.d(b,{A:()=>h});var d=c(6037),e=c.n(d);let f=process.env.MONGODB_URI;if(!f)throw Error("Please define the MONGODB_URI environment variable inside .env.local");let g=global.mongoose;g||(g=global.mongoose={conn:null,promise:null});let h=async function(){if(g.conn)return g.conn;g.promise||(g.promise=e().connect(f,{bufferCommands:!1,maxPoolSize:10,serverSelectionTimeoutMS:5e3,socketTimeoutMS:45e3,family:4}).then(a=>(console.log("✅ Connected to MongoDB"),a)));try{g.conn=await g.promise}catch(a){throw g.promise=null,a}return g.conn}},7872:(a,b,c)=>{c.d(b,{A:()=>h});var d=c(6037),e=c.n(d);let f=new(e()).Schema({id:{type:String,required:!0},rawId:{type:String,required:!0},type:{type:String,required:!0,default:"public-key"},challenge:{type:String,required:!0},userId:{type:String,required:!0},timestamp:{type:Date,required:!0},deviceInfo:{userAgent:String,platform:String,language:String}},{_id:!1}),g=new(e()).Schema({cnicNumber:{type:String,required:!0,unique:!0,match:/^\d{13}$/,index:!0},firstName:{type:String,required:!0,trim:!0,maxlength:50},lastName:{type:String,required:!0,trim:!0,maxlength:50},dateOfBirth:{type:Date,required:!0,validate:{validator:function(a){let b=Math.floor((Date.now()-a)/315576e5);return b>=18&&b<=100},message:"Age must be between 18 and 100 years"}},province:{type:String,required:!0,enum:["Punjab","Sindh","Khyber Pakhtunkhwa","Balochistan","Gilgit"]},constituency:{type:String,required:!0,trim:!0},biometricData:{type:f,required:!0},registrationId:{type:String,unique:!0,default:function(){return"NADRA-"+Date.now().toString(36).toUpperCase()+"-"+Math.random().toString(36).substr(2,6).toUpperCase()}},status:{type:String,enum:["pending","verified","rejected","active"],default:"pending"},submissionTime:{type:Date,default:Date.now},lastUpdated:{type:Date,default:Date.now},ipAddress:String,userAgent:String,isVerified:{type:Boolean,default:!1},verificationDate:Date,verificationNotes:String},{timestamps:!0,toJSON:{transform:function(a,b){return delete b.__v,b}}});g.index({cnicNumber:1}),g.index({registrationId:1}),g.index({submissionTime:-1}),g.index({province:1,constituency:1}),g.index({status:1}),g.pre("save",function(a){this.lastUpdated=new Date,a()}),g.methods.verifyRegistration=function(a){return this.isVerified=!0,this.status="verified",this.verificationDate=new Date,this.verificationNotes=a||"Registration verified successfully",this.save()},g.methods.rejectRegistration=function(a){return this.status="rejected",this.verificationNotes=a||"Registration rejected",this.save()},g.statics.findByCNIC=function(a){return this.findOne({cnicNumber:a})},g.statics.findByRegistrationId=function(a){return this.findOne({registrationId:a})},g.statics.getRegistrationStats=function(){return this.aggregate([{$group:{_id:"$status",count:{$sum:1}}}])};let h=e().models.Registration||e().model("Registration",g)}};var b=require("../../../webpack-api-runtime.js");b.C(a);var c=b.X(0,[169],()=>b(b.s=4403));module.exports=c})();